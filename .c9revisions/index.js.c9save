{"ts":1342233049727,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require(\"express\");\nvar app = express.createServer();\nvar geohash = require(\"geohash\").GeoHash;\n\n// route routing is very easy with express, this will handle the request for root directory contents.\n// :id is used here to pattern match with the first value after the forward slash.\napp.get(\"/:id\",function (req,res)\n    {\n                //decode the geohash with geohash module\n\t\tvar latlon = geohash.decodeGeoHash(req.params[\"id\"]);\n\t\tconsole.log(\"latlon : \" + latlon);\n\t\tvar lat = latlon.latitude[2];\n\t\tconsole.log(\"lat : \" + lat);\n\t\tvar lon = latlon.longitude[2];\n\t\tconsole.log(\"lon : \" + lon);\n\t\tzoom = req.params[\"id\"].length + 2;\n\t\tconsole.log(\"zoom : \" + zoom);\n                // now we use the templating capabilities of express and call our template to render the view, and pass a few parameters to it\n\t\tres.render(\"index.ejs\", { layout: false, lat:lat, lon:lon, zoom:zoom, geohash:req.params[\"id\"]});\n\t});\n    \napp.get(\"/earth\",function(req,res)\n    {\n        res.render(\"earth.ejs\", { layout: false});\n        \n    });\n\n//process.env.PORT is a cloud9 thing. Use your own port (ex 9999) if on a normal platform.\napp.listen(process.env.PORT);"]],"start1":0,"start2":0,"length1":0,"length2":1167}]],"length":1167}
